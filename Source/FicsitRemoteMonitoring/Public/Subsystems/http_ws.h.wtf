/*#pragma once

#include "App.h"
#include "Engine.h"
#include "Json.h"

class FICSITREMOTEMONITORING_API WebSocketServer {
public:
    WebSocketServer() {
        hub.onMessage([this](uWS::WebSocket<uWS::SERVER>* ws, char* message, size_t length, uWS::OpCode opCode) {
            handleMessage(ws, message, length, opCode);
            });

        hub.onHttpRequest([this](uWS::HttpResponse* res, uWS::HttpRequest req, char* data, size_t length, size_t remainingBytes) {
            handleHttpRequest(res, req, data, length, remainingBytes);
            });

        hub.listen(9001, [](uWS::HttpResponse* res, uWS::HttpRequest req, char* data, size_t length, size_t remainingBytes) {
            if (res->getWriteOffset() == 0) {
                res->writeStatus("200 OK");
                res->writeHeader("Content-Type", "text/html; charset=utf-8");
                res->end("<h1>Hello, World!</h1>");
            }
            });

        hub.run();
    }

private:
    uWS::Hub hub;

    void handleMessage(uWS::WebSocket<uWS::SERVER>* ws, char* message, size_t length, uWS::OpCode opCode) {
        FString jsonString = FString(UTF8_TO_TCHAR(message), length);

        // Parse JSON
        TSharedPtr<FJsonObject> jsonObject;
        TSharedRef<TJsonReader<TCHAR>> reader = TJsonReaderFactory<TCHAR>::Create(jsonString);

        if (FJsonSerializer::Deserialize(reader, jsonObject)) {
            // Handle JSON
        }
    }

    void handleHttpRequest(uWS::HttpResponse* res, uWS::HttpRequest req, char* data, size_t length, size_t remainingBytes) {
        FString path = FString(req.getUrl().toString().c_str());

        // Check if path is for API or static file
        if (path.StartsWith("/api")) {
            handleApiRequest(res, req, data, length, remainingBytes);
        }
        else {
            handleStaticFileRequest(res, req, data, length, remainingBytes);
        }
    }

    void handleApiRequest(uWS::HttpResponse* res, uWS::HttpRequest req, char* data, size_t length, size_t remainingBytes) {
        // Handle API request
        FString responseJson = "{\"message\": \"This is a JSON API response.\"}";
        res->end(responseJson.GetCharArray().GetData(), responseJson.Len());
    }

    void handleStaticFileRequest(uWS::HttpResponse* res, uWS::HttpRequest req, char* data, size_t length, size_t remainingBytes) {
        // Serve static files
        FString path = FString(req.getUrl().toString().c_str()).Replace(TEXT("/"), TEXT("\\"));

        FString basePath = FPaths::ProjectContentDir() + "WebContent";
        FString fullPath = FPaths::ConvertRelativePathToFull(basePath + path);

        TArray<uint8> fileData;
        if (FFileHelper::LoadFileToArray(fileData, *fullPath)) {
            res->end(reinterpret_cast<char*>(fileData.GetData()), fileData.Num());
        }
        else {
            res->writeStatus("404 Not Found");
            res->end("404 Not Found");
        }
    }
};
*/